// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package service is a generated protocol buffer package.

It is generated from these files:
	auth.proto
	common.proto
	service.proto

It has these top-level messages:
	ConfigurationRequest
	ConfigurationResponse
	VerificationRequest
	VerificationResponse
	CommonRequest
	CommonResponse
	HelloRequest
	HelloReply
*/
package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfigurationRequest struct {
	Common *CommonRequest `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
}

func (m *ConfigurationRequest) Reset()                    { *m = ConfigurationRequest{} }
func (m *ConfigurationRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationRequest) ProtoMessage()               {}
func (*ConfigurationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConfigurationRequest) GetCommon() *CommonRequest {
	if m != nil {
		return m.Common
	}
	return nil
}

type ConfigurationResponse struct {
	Common    *CommonResponse `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	LogonURL  string          `protobuf:"bytes,10,opt,name=logonURL" json:"logonURL,omitempty"`
	LogoutURL string          `protobuf:"bytes,11,opt,name=logoutURL" json:"logoutURL,omitempty"`
}

func (m *ConfigurationResponse) Reset()                    { *m = ConfigurationResponse{} }
func (m *ConfigurationResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigurationResponse) ProtoMessage()               {}
func (*ConfigurationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfigurationResponse) GetCommon() *CommonResponse {
	if m != nil {
		return m.Common
	}
	return nil
}

// The request message containing the user's name.
type VerificationRequest struct {
	Common *CommonRequest `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	Token  string         `protobuf:"bytes,10,opt,name=token" json:"token,omitempty"`
}

func (m *VerificationRequest) Reset()                    { *m = VerificationRequest{} }
func (m *VerificationRequest) String() string            { return proto.CompactTextString(m) }
func (*VerificationRequest) ProtoMessage()               {}
func (*VerificationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VerificationRequest) GetCommon() *CommonRequest {
	if m != nil {
		return m.Common
	}
	return nil
}

// The response message containing the greetings
type VerificationResponse struct {
	Common          *CommonResponse `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	Valid           bool            `protobuf:"varint,10,opt,name=valid" json:"valid,omitempty"`
	UserID          string          `protobuf:"bytes,11,opt,name=userID" json:"userID,omitempty"`
	CacheExpiration int64           `protobuf:"varint,12,opt,name=cacheExpiration" json:"cacheExpiration,omitempty"`
}

func (m *VerificationResponse) Reset()                    { *m = VerificationResponse{} }
func (m *VerificationResponse) String() string            { return proto.CompactTextString(m) }
func (*VerificationResponse) ProtoMessage()               {}
func (*VerificationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VerificationResponse) GetCommon() *CommonResponse {
	if m != nil {
		return m.Common
	}
	return nil
}

func init() {
	proto.RegisterType((*ConfigurationRequest)(nil), "service.ConfigurationRequest")
	proto.RegisterType((*ConfigurationResponse)(nil), "service.ConfigurationResponse")
	proto.RegisterType((*VerificationRequest)(nil), "service.VerificationRequest")
	proto.RegisterType((*VerificationResponse)(nil), "service.VerificationResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for AuthVerifier service

type AuthVerifierClient interface {
	// verify a token
	VerifyToken(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationResponse, error)
	Configuration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error)
}

type authVerifierClient struct {
	cc *grpc.ClientConn
}

func NewAuthVerifierClient(cc *grpc.ClientConn) AuthVerifierClient {
	return &authVerifierClient{cc}
}

func (c *authVerifierClient) VerifyToken(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationResponse, error) {
	out := new(VerificationResponse)
	err := grpc.Invoke(ctx, "/service.AuthVerifier/VerifyToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authVerifierClient) Configuration(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigurationResponse, error) {
	out := new(ConfigurationResponse)
	err := grpc.Invoke(ctx, "/service.AuthVerifier/Configuration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthVerifier service

type AuthVerifierServer interface {
	// verify a token
	VerifyToken(context.Context, *VerificationRequest) (*VerificationResponse, error)
	Configuration(context.Context, *ConfigurationRequest) (*ConfigurationResponse, error)
}

func RegisterAuthVerifierServer(s *grpc.Server, srv AuthVerifierServer) {
	s.RegisterService(&_AuthVerifier_serviceDesc, srv)
}

func _AuthVerifier_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthVerifierServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AuthVerifier/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthVerifierServer).VerifyToken(ctx, req.(*VerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthVerifier_Configuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthVerifierServer).Configuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.AuthVerifier/Configuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthVerifierServer).Configuration(ctx, req.(*ConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthVerifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.AuthVerifier",
	HandlerType: (*AuthVerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyToken",
			Handler:    _AuthVerifier_VerifyToken_Handler,
		},
		{
			MethodName: "Configuration",
			Handler:    _AuthVerifier_Configuration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x53, 0xcd, 0x4e, 0xea, 0x40,
	0x14, 0xce, 0xdc, 0x1b, 0xb8, 0x70, 0xe0, 0x86, 0x38, 0x96, 0x9f, 0x34, 0x60, 0x48, 0xe3, 0xa2,
	0xab, 0x36, 0xe2, 0x13, 0x08, 0x6a, 0x62, 0xe2, 0xc2, 0x34, 0xea, 0xc6, 0x55, 0x2d, 0x43, 0x99,
	0x48, 0x67, 0x6a, 0x67, 0x4a, 0x24, 0xc6, 0x0d, 0xaf, 0xe0, 0x03, 0xf8, 0x50, 0xbe, 0x81, 0xf1,
	0x41, 0x4c, 0x67, 0x0a, 0x0a, 0xc8, 0x46, 0x57, 0x3d, 0xe7, 0xfb, 0x4e, 0xbe, 0x73, 0xbe, 0xd3,
	0x33, 0x00, 0x7e, 0x2a, 0xc7, 0x4e, 0x9c, 0x70, 0xc9, 0xf1, 0x3f, 0x41, 0x92, 0x29, 0x0d, 0x88,
	0x59, 0x0d, 0x78, 0x14, 0x71, 0xa6, 0x61, 0xb3, 0x1d, 0x72, 0x1e, 0x4e, 0x88, 0xeb, 0xc7, 0xd4,
	0xf5, 0x19, 0xe3, 0xd2, 0x97, 0x94, 0x33, 0xa1, 0x59, 0xeb, 0x14, 0x8c, 0x01, 0x67, 0x23, 0x1a,
	0xa6, 0x89, 0xc2, 0x3d, 0x72, 0x9f, 0x12, 0x21, 0xb1, 0x03, 0x45, 0xad, 0xd2, 0x42, 0x5d, 0x64,
	0x57, 0x7a, 0x0d, 0x27, 0x57, 0x77, 0x06, 0x0a, 0xce, 0xeb, 0xbc, 0xbc, 0xca, 0x9a, 0x23, 0xa8,
	0xaf, 0x09, 0x89, 0x98, 0x33, 0x41, 0xb0, 0xbb, 0xa6, 0xd4, 0xdc, 0x50, 0xd2, 0x85, 0x0b, 0x29,
	0x6c, 0x42, 0x69, 0xc2, 0x43, 0xce, 0xae, 0xbc, 0xf3, 0x16, 0x74, 0x91, 0x5d, 0xf6, 0x96, 0x39,
	0x6e, 0x43, 0x39, 0x8b, 0x53, 0x99, 0x91, 0x15, 0x45, 0x7e, 0x02, 0xd6, 0x0d, 0xec, 0x5e, 0x93,
	0x84, 0x8e, 0x68, 0xf0, 0x1b, 0x2f, 0xd8, 0x80, 0x82, 0xe4, 0x77, 0x84, 0xe5, 0xdd, 0x75, 0x62,
	0xbd, 0x20, 0x30, 0x56, 0xd5, 0x7f, 0x6a, 0xd0, 0x80, 0xc2, 0xd4, 0x9f, 0xd0, 0xa1, 0xd2, 0x2f,
	0x79, 0x3a, 0xc1, 0x0d, 0x28, 0xa6, 0x82, 0x24, 0x67, 0xc7, 0xb9, 0xaf, 0x3c, 0xc3, 0x36, 0xd4,
	0x02, 0x3f, 0x18, 0x93, 0x93, 0x87, 0x98, 0xea, 0xd5, 0xb6, 0xaa, 0x5d, 0x64, 0xff, 0xf5, 0xd6,
	0xe1, 0xde, 0x1b, 0x82, 0xea, 0x51, 0x2a, 0xc7, 0x7a, 0x4a, 0x92, 0x60, 0x0a, 0x15, 0x15, 0xcf,
	0x2e, 0x33, 0x07, 0xb8, 0xbd, 0x1c, 0xec, 0x9b, 0x2d, 0x99, 0x9d, 0x2d, 0xac, 0x1e, 0xde, 0xea,
	0xcc, 0x5f, 0xdf, 0x9f, 0xff, 0x34, 0x71, 0x5d, 0x1d, 0xd2, 0xf4, 0xc0, 0x55, 0x5b, 0x71, 0x1f,
	0xd5, 0xe7, 0x09, 0x87, 0xf0, 0x7f, 0xe5, 0xf7, 0xe3, 0xce, 0x97, 0x2d, 0x6c, 0xde, 0x97, 0xb9,
	0xb7, 0x8d, 0xce, 0xdb, 0x35, 0x55, 0xbb, 0x1d, 0x5c, 0x5b, 0xb4, 0x13, 0x54, 0x92, 0xc8, 0x8f,
	0xfb, 0xfb, 0x80, 0x03, 0x1e, 0x39, 0x43, 0x21, 0xc5, 0x4c, 0x92, 0x48, 0x38, 0xd9, 0x0b, 0xe8,
	0xaf, 0xf8, 0xbe, 0x40, 0xb7, 0x45, 0x75, 0xdd, 0x87, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x36,
	0xda, 0x32, 0x46, 0x20, 0x03, 0x00, 0x00,
}
